#!/usr/bin/env ruby

require 'rubygems'
require 'yaml'
require 'thor'
require 'dust'

# TODO:
# source this out into a 'helpers.rb' or so
class Hash
  def merge_r h
    self.merge! h do |key, old, new|
      # only merge if old and new are both hashes.
      # otherwise just replace old with new
      if old.class == Hash and new.class == Hash then old.merge_r new else new end
    end
  end
end

module Dust
class Deploy < Thor

  method_options :yaml => :string,
                 :filter => :hash,
                 :recipes => :array

  desc 'deploy <host>|all', 'deploy all recipes to the node <host> or all defined nodes'
  def deploy host='all'

    # load the specified node.yaml for the host given as an argument.
    # if the argument is 'all', select all nodes in the nodes directory
    if host == 'all'
      nodes = Dir['nodes/*.yaml']
    else
      nodes = "nodes/#{host}.yaml"
    end

    nodes.each do |file|
      node = YAML.load_file(file)

      # if there is not hostname field in the yaml file,
      # treat this node file as a template, and skip to the next one
      next unless node['hostname']
     
      # look for the inherits field in the yaml file,
      # and merge the templates recursively into this node
      if node['inherits']
        to_a( node.delete('inherits') ).each do |file|
          template = YAML.load_file "nodes/#{file}.yaml"
          node = template.merge_r node
        end
      end

      # create a new field with the fully qualified domain name
      node['fqdn'] = node['hostname']
      node['fqdn'] += '.' + node['domain'] if node['domain']

      # skip this node if there are no recipes found
      next unless node['recipes']

      # connect to server
      server = Server.new node 
      next unless server.connect

      # runs the method with the recipe name, defined and included in recipe/*.rb
      # call recipes for each recipe that is defined for this node
      node['recipes'].each do |recipe, ingredients|
        # in case --recipes was set, skip unwanted recipes
        next unless options[:recipes].include?(recipe) if options[:recipes]

        # skip disabled recipes
        next if ingredients == 'disabled'
        
        # this is still in progress, I also want to pass arguments to this subroutine,
        # display help messages, and things like that. 
        # thor can probably somehow take care of that, but I didn't find out yet.
        Dust.print_recipe recipe
        self.send recipe.to_sym, server, ingredients
        puts
      end

      server.disconnect
    end
  end

  private
  # takes a string or an array.
  # if element is an array, it is returned as it is
  # but returns [ stringÂ ] if element is a string
  # returns false if element is neither a string nor an array
  def to_a element
    return [ element ] if element.class == String
    return element if element.class == Array
    false
  end

end

# require all recipes (system wide and in local ./recipes directory)
Dir[File.dirname(__FILE__) + '/../lib/dust/recipes/*.rb'].each { |file| require file }
Dir['./recipes/*.rb'].each { |file| require file }

Deploy.start
end
